@model rise.ViewModels.QuoteViewModel
@using rise.Models

@functions{

    // Return Arrow symbole depending of the value
    public string GetArrowSymbol(double value)
    {
        if (value < 0)
        {
            return "fa fa-arrow-circle-down";
        }

        return "fa fa-arrow-circle-up";
    }

    // Return Arrow symbole depending of the value
    public string GetBackgroundColor(double value)
    {
        if (value < 0)
        {
            return "bg-danger";
        }

        return "bg-success";
    }

    // Return Arrow symbole depending of the value
    public string TextColor(double value)
    {
        if (value < 0)
        {
            return "text-danger";
        }

        return "text-success";
    }
}

@{
    var CoinQuoteMonth = Model.CoinQuoteByDays(15);
    var LastQuote = Model.LastAllQuote();
    var Percentchange = Math.Round(Model.PercentChange(1), 2);
    var VolumePercentchange = Math.Round(Model.VolumePercentChange(1), 2);
    var USDPricePercentchange = Math.Round(Model.USDPricePercentChange(1), 2);
}

<script type="text/javascript">

        // Return with commas in between
        var numberWithCommas = function (x) {
            return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        };

        var dataPack1 = [@Html.Raw(string.Join(",", CoinQuoteMonth.Where(x => x.Exchange == "Vinex").Select(x => "\"" + Math.Round(x.Volume) + "\"").ToList()))];
        var dataPack2 = [@Html.Raw(string.Join(",", CoinQuoteMonth.Where(x => x.Exchange == "LiveCoin").Select(x => "\"" + Math.Round(x.Volume) + "\"").ToList()))];
        var dataPack4 = [@Html.Raw(string.Join(",", CoinQuoteMonth.Where(x => x.Exchange == "Altilly").Select(x => "\"" + Math.Round(x.Volume) + "\"").ToList()))];
        var dataPack3 = [@Html.Raw(string.Join(",", CoinQuoteMonth.Where(x => x.Exchange == "All").Select(x => "\"" + Math.Round(x.Price * 100000000) + "\"").ToList()))];
        var dates = [@Html.Raw(string.Join(",", CoinQuoteMonth.Select(x => "\"" + x.TimeStamp.ToShortDateString() + "\"").Distinct()))];

        var bar_ctx = document.getElementById('priceQuoteChart').getContext("2d");

        var gradient1 = bar_ctx.createLinearGradient(0, 0, 0, 200);
        gradient1.addColorStop(0, 'rgba(0,153,255, 0.5)');
        gradient1.addColorStop(0.5, 'rgba(0, 153, 255, 0.25)');
        gradient1.addColorStop(1, 'rgba(0, 153, 255, 0)');

        var gradient2 = bar_ctx.createLinearGradient(0, 0, 0, 200);
        gradient2.addColorStop(0, 'rgba(190, 65,244, 0.5)');
        gradient2.addColorStop(0.5, 'rgba(190, 65, 244, 0.25)');
        gradient2.addColorStop(1, 'rgba(190, 65, 244, 0)');

        var gradient3 = bar_ctx.createLinearGradient(0, 0, 0, 200);
        gradient3.addColorStop(0, 'rgba(255, 204,51, 0.5)');
        gradient3.addColorStop(0.5, 'rgba(255, 204, 51, 0.25)');
        gradient3.addColorStop(1, 'rgba(255, 204, 51, 0)');

        var bar_chart = new Chart(bar_ctx, {
        type: 'bar',
        data: {
            labels: dates,
            datasets: [
                {
                label: "Price",
                    type: "line",
                    yAxisID: "price",
                    data: dataPack3,
                    backgroundColor: "rgba(0, 155, 5, 0.2)",
                    borderColor: "rgba(0,155,5,1)",
                    hoverBackgroundColor: "rgba(0, 153, 211, 0.7)",
                    hoverBorderWidth: 2,
                    hoverBorderColor: 'lightgrey'
                },
                {
                    label: 'Vinex',
                    yAxisID: "volume",
                    data: dataPack1,
                    backgroundColor: gradient2,
                    hoverBackgroundColor: gradient2,
                    hoverBorderWidth: 2,
                    hoverBorderColor: 'purple'
                },
                {
                label: 'LiveCoin',
                    yAxisID: "volume",
                    data: dataPack2,
                    backgroundColor: gradient1,
					hoverBackgroundColor: gradient1,
                    hoverBorderWidth: 2,
                    hoverBorderColor: 'lightgrey'
                },
                {
                label: 'Altilly',
                    yAxisID: "volume",
                    data: dataPack4,
                    backgroundColor: gradient3,
                    hoverBackgroundColor: gradient3,
                    hoverBorderWidth: 2,
                    hoverBorderColor: 'lightgrey'
                }
            ]
        },
        options: {
            maintainAspectRatio: false,
            animation: {
                duration: 15,
            },
            tooltips: {
                mode: 'label',
                callbacks: {
                    label: function (tooltipItem, data) {
                        return data.datasets[tooltipItem.datasetIndex].label + ": " + numberWithCommas(tooltipItem.yLabel);
                    }
                }
            },
            scales: {
                xAxes: [{
                    stacked: true,
                    gridLines: { display: false },
                }],
                yAxes: [{
                    id: 'volume',
                    position: 'left',
                    stacked: true,
                    gridLines: { display: false },
                    ticks: {
                        callback: function (value) { return numberWithCommas(value); },
                    }
                },
                    {
                    id: 'price',
                    position: 'right'
                }]
            }, // scales
            legend: { display: true }
        } // options
    }
    );
</script>

<!-- Small boxes (Stat box) -->
<div class="row">
    <div class="col-lg-3 grid-margin stretch-card">
        <div class="box card aligner-wrapper">
            <div class="card-body">
                <p class="text-muted mb-2">@(AppSettingsProvider.CoinName) price in Sat.</p>
                <div class="d-flex align-items-center">
                    <h1 class="font-weight-medium mb-2">@(Math.Round(LastQuote.Price * 100000000))</h1>
                    <h5 class="font-weight-medium @TextColor(Percentchange) ml-2"> @(Percentchange)%</h5>
                </div>
                <div class="d-flex align-items-center">
                    <div class="bg-success dot-indicator"></div>
                    <p class="text-muted mb-0">Price for the last 24h</p>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 grid-margin stretch-card">
        <div class="box card aligner-wrapper">
            <div class="card-body">
                <p class="text-muted mb-2">@(AppSettingsProvider.CoinName) 24h Range</p>
                <div class="d-flex align-items-center">
                    <h1 class="font-weight-medium mb-2">
                        @Math.Round(Model.DaysLow(1) * 100000000)
                        <font size="5"><i class="fa fa-caret-left"></i>&nbsp;<i class="fa fa-caret-right"></i></font>
                        @Math.Round(Model.DaysHigh(1) * 100000000)
                    </h1>
                </div>
                <div class="d-flex align-items-center">
                    <div class="bg-success dot-indicator"></div>
                    <p class="text-muted mb-0">Range for the last 24h</p>
                </div>
            </div>
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 grid-margin stretch-card">
        <div class="box card aligner-wrapper">
            <div class="card-body">
                <p class="text-muted mb-2">@(AppSettingsProvider.CoinName) Volume.</p>
                <div class="d-flex align-items-center">
                    <h1 class="font-weight-medium mb-2">@(Math.Round(LastQuote.Volume).ToString("N0"))</h1>
                    <h5 class="font-weight-medium @TextColor(VolumePercentchange) ml-2"> @(VolumePercentchange)%</h5>
                </div>
                <div class="d-flex align-items-center">
                    <div class="bg-success dot-indicator"></div>
                    <p class="text-muted mb-0">Volume last 24h $@(Math.Round(LastQuote.Volume * LastQuote.USDPrice, 2).ToString("N0")) USD</p>
                </div>
            </div>
        </div>
    </div>
    <!-- ./col -->

    <div class="col-lg-3 grid-margin stretch-card">
        <div class="box card aligner-wrapper">
            <div class="card-body">
                <p class="text-muted mb-2">@(AppSettingsProvider.CoinName) USD Price.</p>
                <div class="d-flex align-items-center">
                    <h1 class="font-weight-medium mb-2">$@(Math.Round(LastQuote.USDPrice, 4))</h1>
                    <h5 class="font-weight-medium @TextColor(USDPricePercentchange) ml-2"> @(USDPricePercentchange)%</h5>
                </div>
                <div class="d-flex align-items-center">
                    <div class="bg-success dot-indicator"></div>
                    <p class="text-muted mb-0">Based on Coinbase btc price</p>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="box card">
    <div class="card-header no-border">
        <div class="d-flex justify-content-between">
            <h3 class="card-title">@(AppSettingsProvider.CoinName) Market Stats</h3>
        </div>
    </div>
    <div class="card-body">
        <div class="position-relative mb-4">
            <canvas id="priceQuoteChart" height="200"></canvas>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-3 grid-margin stretch-card">
        <div class="box card aligner-wrapper">
            <div class="card-body">
                <p class="text-muted mb-2">Telegram Tip Account Balance</p>
                <div class="d-flex align-items-center">
                    <h1 class="font-weight-medium mb-2">
                        @Math.Round(TipAccountStats.TotalBalance, 2).ToString("N0") <small class="text-muted">Rise</small>
                    </h1>
                </div>
                <div class="d-flex align-items-center">
                    <div class="bg-success dot-indicator"></div>
                    <p class="text-muted mb-0">Total from @TipAccountStats.UsersCount users account</p>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 grid-margin stretch-card">
        <div class="box card aligner-wrapper">
            <div class="card-body">
                <p class="text-muted mb-2">Telegram Tip Account Transactions</p>
                <div class="d-flex align-items-center">
                    <h1 class="font-weight-medium mb-2">
                        @TipAccountStats.TotalTransactions <small class="text-muted">Tx</small>
                    </h1>
                </div>
                <div class="d-flex align-items-center">
                    <div class="bg-success dot-indicator"></div>
                    <p class="text-muted mb-0">Last updated @DateTime.Now</p>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 grid-margin stretch-card">
        <div class="box card aligner-wrapper">
            <div class="card-body">
                <p class="text-muted mb-2">Telegram Tip Rise Traded</p>
                <div class="d-flex align-items-center">
                    <h1 class="font-weight-medium mb-2">
                        @TipAccountStats.TotalAmountTransactions <small class="text-muted">Rise</small>
                    </h1>
                </div>
                <div class="d-flex align-items-center">
                    <div class="bg-success dot-indicator"></div>
                    <p class="text-muted mb-0">Last updated @DateTime.Now</p>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 grid-margin stretch-card">
        <div class="box card aligner-wrapper">
            <div class="card-body">
                <p class="text-muted mb-2">Livecoin Best Bid and Ask</p>
                <div class="d-flex align-items-center">
                    <h1 class="font-weight-medium mb-2">
                        @((Model.liveCoinQuoteResult.BestBid * 100000000).ToString())
                        <font size="5"><i class="fa fa-caret-left"></i>&nbsp;<i class="fa fa-caret-right"></i></font>
                        @((Model.liveCoinQuoteResult.BestAsk * 100000000).ToString())
                    </h1>
                </div>
                <div class="d-flex align-items-center">
                    <div class="bg-success dot-indicator"></div>
                    <p class="text-muted mb-0">Bid / Ask</p>
                </div>
            </div>
        </div>
    </div>
</div>
@{
    var toAltilly = Model.transactionsResult.transactions.Where(x => Model.FromGenesisTime(x.timestamp) > DateTime.Now.AddDays(-1).ToUniversalTime()).Where(x => x.recipientId == AppSettingsProvider.AltillyWalletAddress).ToList();
    var fromAltilly = Model.transactionsResult.transactions.Where(x => Model.FromGenesisTime(x.timestamp) > DateTime.Now.AddDays(-1).ToUniversalTime()).Where(x => x.senderId == AppSettingsProvider.AltillyWalletAddress).ToList();
    var toLiveCoin = Model.transactionsResult.transactions.Where(x => Model.FromGenesisTime(x.timestamp) > DateTime.Now.AddDays(-1).ToUniversalTime()).Where(x => x.recipientId == AppSettingsProvider.LiveCoinWalletAddress).ToList();
    var fromLiveCoin = Model.transactionsResult.transactions.Where(x => Model.FromGenesisTime(x.timestamp) > DateTime.Now.AddDays(-1).ToUniversalTime()).Where(x => x.senderId == AppSettingsProvider.LiveCoinWalletAddress).ToList();
    var toVinex = Model.transactionsResult.transactions.Where(x => Model.FromGenesisTime(x.timestamp) > DateTime.Now.AddDays(-1).ToUniversalTime()).Where(x => x.recipientId == "2644104824710583527R");
    var fromVinex = Model.transactionsResult.transactions.Where(x => Model.FromGenesisTime(x.timestamp) > DateTime.Now.AddDays(-1).ToUniversalTime()).Where(x => x.senderId == AppSettingsProvider.VinexWalletAddress);
}

<div class="row">
    <div class="col-lg-4 grid-margin stretch-card">
        <div class="box card">
            <div class="card-body">
                <div class="d-flex justify-content-center">
                    <div align="center">
                        <img src="~/img/livecoin.png" alt="livecoin" class="img-circle img-size-32 mr-2">
                        <div><a href="https://www.livecoin.net/">Livecoin</a></div>
                    </div>
                    <div class="d-flex flex-column ml-4">
                        <span class="d-flex flex-column">
                            <p class="mb-0">Deposit</p>
                            <h4 class="font-weight-bold">@toLiveCoin.Sum(x => x.amount / 100000000).ToString("N0")</h4>
                        </span>
                        @if (toLiveCoin.Count() > 0)
                        {
                            <small class="text-muted">On @toLiveCoin.Count() Tx</small>
                        }
                    </div>
                    <div class="d-flex flex-column ml-4">
                        <span class="d-flex flex-column">
                            <p class="mb-0">Withdraw</p>
                            <h4 class="font-weight-bold">@fromLiveCoin.Sum(x => x.amount / 100000000).ToString("N0")</h4>
                        </span>
                        @if (fromLiveCoin.Count() > 0)
                        {
                            <small class="text-muted">On <b>@fromLiveCoin.Count()</b> Tx</small>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-4 grid-margin stretch-card">
        <div class="box card">
            <div class="card-body">
                <div class="d-flex justify-content-center">
                    <div align="center">
                        <img src="~/img/vinex.png" alt="vinex" class="img-circle img-size-32 mr-2">
                        <div><a href="https://vinex.network/">Vinex</a></div>
                    </div>
                    <div class="d-flex flex-column ml-4">
                        <span class="d-flex flex-column">
                            <p class="mb-0">Deposit</p>
                            <h4 class="font-weight-bold">@toVinex.Sum(x => x.amount / 100000000).ToString("N0")</h4>
                        </span>
                        @if (toVinex.Count() > 0)
                        {
                            <small class="text-muted">On <b>@toVinex.Count()</b> Tx</small>
                        }
                    </div>
                    <div class="d-flex flex-column ml-4">
                        <span class="d-flex flex-column">
                            <p class="mb-0">Withdraw</p>
                            <h4 class="font-weight-bold">@fromVinex.Sum(x => x.amount / 100000000).ToString("N0")</h4>
                        </span>
                        @if (fromVinex.Count() > 0)
                        {
                            <small class="text-muted">On <b>@fromVinex.Count()</b> Tx</small>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-4 grid-margin stretch-card">
        <div class="box card">
            <div class="card-body">
                <div class="d-flex justify-content-center">
                    <div align="center">
                        <img src="~/img/altilly.png" alt="altilly" class="img-circle img-size-32 mr-2">
                        <div> <a href="https://www.altilly.com/">Altilly</a></div>
                    </div>
                    <div class="d-flex flex-column ml-4">
                        <span class="d-flex flex-column">
                            <p class="mb-0">Deposit</p>
                            <h4 class="font-weight-bold">@toAltilly.Sum(x => x.amount / 100000000).ToString("N0")</h4>
                        </span>
                        @if (toAltilly.Count() > 0)
                        {
                            <small class="text-muted">On <b>@toAltilly.Count()</b> Tx</small>
                        }
                    </div>
                    <div class="d-flex flex-column ml-4">
                        <span class="d-flex flex-column">
                            <p class="mb-0">Withdraw</p>
                            <h4 class="font-weight-bold">@fromAltilly.Sum(x => x.amount / 100000000).ToString("N0")</h4>
                        </span>
                        @if (fromAltilly.Count() > 0)
                        {
                            <small class="text-muted">On <b>@fromAltilly.Count()</b> Tx</small>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>