@model rise.ViewModels.QuoteViewModel
@using rise.Models

@functions{ // Return Arrow symbole depending of the value
    public string GetArrowSymbol(double value)
    {
        if (value < 0)
        {
            return "fa fa-arrow-circle-down";
        }

        return "fa fa-arrow-circle-up";
    }

    // Return Arrow symbole depending of the value
    public string GetBackgroundColor(double value)
    {
        if (value < 0)
        {
            return "bg-danger";
        }

        return "bg-success";
    }

    // Return Arrow symbole depending of the value
    public string TextColor(double value)
    {
        if (value < 0)
        {
            return "text-danger";
        }

        return "text-success";
    } }

@{ var CoinQuoteMonth = Model.CoinQuoteByDays(15);
    var LastQuote = Model.LastAllQuote();
    var Percentchange = Math.Round(Model.PercentChange(1), 2);
    var VolumePercentchange = Math.Round(Model.VolumePercentChange(1), 2);
    var USDPricePercentchange = Math.Round(Model.USDPricePercentChange(1), 2);

    var Xtcom = Model.LastXtcomQuote(); }

<script type="text/javascript">

    var canvas = document.getElementById("pieChart");
    var ctx = canvas.getContext('2d');
    Chart.defaults.global.title = 'Volume';
        var data = {
            labels: ["Xt.com - " + @Math.Round(Xtcom.Volume) + " - " + @Math.Round(Xtcom.Price * 100000000)],
        datasets: [{
            label: "Exchanges Volume 24H",
            backgroundColor: ["#36a2eb", "#ffce56", "#7df442", "#cc65fe", "#ff6384"],
            data: [@Html.Raw(Xtcom.Volume)]
        }]
    };

    var options = {
        backgroundColor: { fill: 'transparent' },

        legend: {
            display: true,
            position: 'right',
            labels: {
                fontColor: 'lightgrey'
            }
        },
    };

    // Chart declaration:
    var myBarChart = new Chart(ctx, {
        type: 'pie',
        data: data,
        options: options
    });
</script>

<script type="text/javascript">

        // Return with commas in between
        var numberWithCommas = function (x) {
            return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        };

        var dataPack3 = [@Html.Raw(string.Join(",", CoinQuoteMonth.Where(x => x.Exchange == "All").Select(x => "\"" + Math.Round(x.Price * 100000000) + "\"").ToList()))];
        var dataPack4 = [@Html.Raw(string.Join(",", CoinQuoteMonth.Where(x => x.Exchange == "Xt.com").Select(x => "\"" + Math.Round(x.Volume) + "\"").ToList()))];

        var dates = [@Html.Raw(string.Join(",", CoinQuoteMonth.Select(x => "\"" + x.TimeStamp.ToShortDateString() + "\"").Distinct()))];

        var bar_ctx = document.getElementById('priceQuoteChart').getContext("2d");

        var gradient1 = bar_ctx.createLinearGradient(0, 0, 0, 200);
        gradient1.addColorStop(0, 'rgba(54, 152, 235, 0.5)');
        gradient1.addColorStop(1, 'rgba(54, 152, 235, 0)');

        var gradient2 = bar_ctx.createLinearGradient(0, 0, 0, 200);
        gradient2.addColorStop(0, 'rgba(255,206,86, 0.5)');
        gradient2.addColorStop(1, 'rgba(255, 206, 86, 0)');

        var gradient3 = bar_ctx.createLinearGradient(0, 0, 0, 200);
        gradient3.addColorStop(0, 'rgba(125,244,66, 0.5)');
        gradient3.addColorStop(1, 'rgba(125,244,66, 0)');

        var gradient4 = bar_ctx.createLinearGradient(0, 0, 0, 200);
        gradient4.addColorStop(0, 'rgba(204,101,254, 0.5)');
        gradient4.addColorStop(1, 'rgba(204,101,254, 0)');

        var bar_chart = new Chart(bar_ctx, {
        type: 'bar',
        data: {
            labels: dates,
            datasets: [
                {
                    label: 'Xt.com',
                    yAxisID: "volume",
                    data: dataPack4,
                    backgroundColor: gradient2,
                    hoverBackgroundColor: gradient2,
                    hoverBorderWidth: 2,
                    hoverBorderColor: 'purple'
                },
                {
                 label: "Price",
                    type: "line",
                    yAxisID: "price",
                    data: dataPack3,
                    backgroundColor: "rgba(0, 155, 5, 0.2)",
                    borderColor: "rgba(0,155,5,1)",
                    hoverBackgroundColor: "rgba(0, 153, 211, 0.7)",
                    hoverBorderWidth: 2,
                    hoverBorderColor: 'lightgrey'
                }
            ]
        },
        options: {
            maintainAspectRatio: false,
            animation: {
                duration: 15,
            },
            tooltips: {
                mode: 'label',
                callbacks: {
                    label: function (tooltipItem, data) {
                        return data.datasets[tooltipItem.datasetIndex].label + ": " + numberWithCommas(tooltipItem.yLabel);
                    }
                }
            },
            scales: {
                xAxes: [{
                    stacked: true,
                    gridLines: {
                        color: 'none',
                        display: false,
                        drawOnChartArea: false,
                        drawTicks: false
                    },
                }],
                yAxes: [{
                    id: 'volume',
                    position: 'left',
                    stacked: true,
                    gridLines: {
                        color: 'none',
                        display: false,
                        drawOnChartArea: false,
                        drawTicks: false
                    },
                    ticks: {
                        callback: function (value) { return numberWithCommas(value); },
                    }
                },
                    {
                    id: 'price',
                    position: 'right'
                }]
            },
            legend: { display: true }
        }
    }
    );
</script> <!-- Small boxes (Stat box) -->
<div class="row">
    <div class="col-lg-3 grid-margin stretch-card">
        <div class="box card aligner-wrapper">
            <div class="card-body">
                <p class="text-muted mb-2">@(AppSettingsProvider.CoinName) price in Sat.</p>
                <div class="d-flex align-items-center">
                    <h1 class="font-weight-medium mb-2">@(Math.Round(LastQuote.Price * 100000000))</h1>
                    <h5 class="font-weight-medium @TextColor(Percentchange) ml-2"> @(Percentchange)%</h5>
                </div>
                <div class="d-flex align-items-center">
                    <div class="bg-success dot-indicator"></div>
                    <p class="text-muted mb-0">Price for the last 24h</p>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 grid-margin stretch-card">
        <div class="box card aligner-wrapper">
            <div class="card-body">
                <p class="text-muted mb-2">@(AppSettingsProvider.CoinName) 24h Range</p>
                <div class="d-flex align-items-center">
                    <h1 class="font-weight-medium mb-2">
                        @Math.Round(Model.DaysLow(1) * 100000000)
                        <font size="5"><i class="fa fa-caret-left"></i>&nbsp;<i class="fa fa-caret-right"></i></font>
                        @Math.Round(Model.DaysHigh(1) * 100000000)
                    </h1>
                </div>
                <div class="d-flex align-items-center">
                    <div class="bg-success dot-indicator"></div>
                    <p class="text-muted mb-0">Range for the last 24h</p>
                </div>
            </div>
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 grid-margin stretch-card">
        <div class="box card aligner-wrapper">
            <div class="card-body">
                <p class="text-muted mb-2">@(AppSettingsProvider.CoinName) Volume.</p>
                <div class="d-flex align-items-center">
                    <h1 class="font-weight-medium mb-2">@(Math.Round(LastQuote.Volume).ToString("N0"))</h1>
                    <h5 class="font-weight-medium   @TextColor(VolumePercentchange) ml-2"> @(VolumePercentchange)%</h5>
                </div>
                <div class="d-flex align-items-center">
                    <div class="bg-success dot-indicator"></div>
                    <p class="text-muted mb-0">Volume last 24h $@(Math.Round(LastQuote.Volume * LastQuote.USDPrice, 2).ToString("N0")) USD</p>
                </div>
            </div>
        </div>
    </div>
    <!-- ./col -->

    <div class="col-lg-3 grid-margin stretch-card">
        <div class="box card aligner-wrapper">
            <div class="card-body">
                <p class="text-muted mb-2">@(AppSettingsProvider.CoinName) USD Price.</p>
                <div class="d-flex align-items-center">
                    <h1 class="font-weight-medium mb-2">$@(Math.Round(LastQuote.USDPrice, 4))</h1>
                    <h5 class="font-weight-medium @TextColor(USDPricePercentchange) ml-2"> @(USDPricePercentchange)%</h5>
                </div>
                <div class="d-flex align-items-center">
                    <div class="bg-success dot-indicator"></div>
                    <p class="text-muted mb-0">Coinbase $@(double.Parse(CoinbaseBtcQuote.Current.amount).ToString("N0")) btc price</p>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="box card">
    <div class="card-header no-border">
        <div class="d-flex justify-content-between">
            <h3 class="card-title">@(AppSettingsProvider.CoinName) Market Stats</h3>
        </div>
    </div>

    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                <canvas id="priceQuoteChart" height="200"></canvas>
            </div>
        </div>
    </div>
</div>

<div class="box card">
    <div class="card-header no-border">
        <div class="d-flex justify-content-between">
            <h3 class="card-title">24H Volume by Exchange<</h3>
        </div>
    </div>

    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <canvas id="pieChart" height="125"></canvas>
            </div>
        </div>
    </div>
</div>