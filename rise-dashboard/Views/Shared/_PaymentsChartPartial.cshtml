@using rise.Models
@model rise.ViewModels.AccountSummaryViewModel

@functions{

    // Return the Genesistime from rise Start
    public static DateTime FromGenesisTime(long unixTime)
    {
        DateTime epoch = new DateTime(2016, 05, 24, 17, 0, 0, 0).ToLocalTime();
        return epoch.AddSeconds(unixTime);
    }

    public static long ToGenesisTime(int minutesfrom)
    {
        var epoch = new DateTime(2016, 05, 24, 17, 0, 0, 0).ToLocalTime();
        return Convert.ToInt64((DateTime.Now.AddMinutes(-minutesfrom) - epoch).TotalSeconds);
    }

    // return the account name of delegate
    public string ToDelegateUser(string address)
    {
        var mydelegate = Model.delegateResult.Delegates.Where(x => x.Address == address).FirstOrDefault();

        if (mydelegate != null)
        {
            return mydelegate.Username;
        }

        return null;
    }
}

@{var guid = Guid.NewGuid().ToString().Replace("-", "");}

<script type="text/javascript">

    Chart.defaults.global.defaultFontColor = '#D8D8D8';
    var ctx_@guid = document.getElementById("myChart_@guid");

    var myChart_@guid = new Chart(ctx_@guid, {
        type: 'horizontalBar',
        data: {
            labels: [
                      @foreach (var myvote in Model.delegateVotesResult.Delegates.OrderBy(x => x.Username))
                      {
                            <text>'@myvote.Username',</text>
                      }
            ],

            datasets: [{
               label: '#@(AppSettingsProvider.CoinName) Received per Vote',
               data: [
                      @foreach (var myvote in Model.delegateVotesResult.Delegates.OrderBy(x => x.Username))
                      {
                        var sum = Model.coinReceivedByAccount.transactions.Where(x => x.senderId == myvote.Address).Where(y => y.timestamp >= ToGenesisTime(ViewBag.Minutes)).Sum(x => Double.Parse(x.amount.ToString()) / 100000000);
                        <text>@sum,</text>
                      }
                ],
                metadata: [
                    @foreach (var myvote in Model.delegateVotesResult.Delegates.OrderBy(x => x.Username))
                      {
                            <text>'@myvote.Address',</text>
                      }
                ],
                datalabels: {
                    align: 'end',
                    anchor: 'start'
                },
                backgroundColor: "#EF8C99",
                borderColor: "#EF8C99",
                borderWidth: 1
            }],
        },
        options: {
            legend: {
                labels: {
                    // This more specific font property overrides the global property
                    fontColor: 'white'
                }
            },
            tooltips: {
                enabled: true,
                callbacks: {
                    label: function (tooltipItem) {
                        return tooltipItem.yLabel + " " + Number(tooltipItem.xLabel) + " @(AppSettingsProvider.CoinName) ";
                    }
                }
            },
            onClick: function (c, i) {
                e = i[0];
                var x_value = this.data.labels[e._index];
                var y_value = this.data.datasets[0].data[e._index];
                var m_value = this.data.datasets[0].metadata[e._index];
                window.open("@(AppSettingsProvider.CoinExplorer)/address/" + m_value);
            },
            hover: {
                animationDuration: 0
            },
            animation: {
                duration: 1,
                onComplete: function () {
                    var chartInstance = this.chart,
                    ctx = chartInstance.ctx;
                    ctx.fillStyle = 'rgb(255, 255, 255)';
                    var fontSize = 10;
                    var fontStyle = 'normal';
                    var fontFamily = 'arial';
                    ctx.font = Chart.helpers.fontString(fontSize, fontStyle, fontFamily);

                    this.data.datasets.forEach(function (dataset, i) {
                        var meta = chartInstance.controller.getDatasetMeta(i);
                        meta.data.forEach(function (bar, index) {
                            var data = dataset.data[index];
                            var dataString = dataset.data[index].toString();
                            ctx.textAlign = 'left';
                            ctx.textBaseline = 'middle';
                            var padding = 0;
                            var position = bar.tooltipPosition();
                            ctx.fillText(dataString, position.x + 4, position.y);
                        });
                    });
                }
            },
            maintainAspectRatio: false,
            responsive: true,
            scales: {
                xAxes: [{
                    ticks: {
                        maxRotation: 90,
                        minRotation: 80
                    }
                }],
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });
</script>

<!-- Bar Chart for Payment-->
@if (Model.coinReceivedByAccount.transactions.Where(y => y.timestamp >= ToGenesisTime(ViewBag.Minutes)).Count() > 0)
{
    <canvas id="myChart_@guid" height="@((Model.delegateVotesResult.Delegates.OrderBy(x => x.Username).Count() * 20) + 80)" width="800"></canvas>
}
<!-- End Bar Chart for Payments-->